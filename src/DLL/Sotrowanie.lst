Microsoft (R) Macro Assembler Version 9.00.30729.01	    02/17/11 20:18:13
.\Sortowanie.asm					     Page 1 - 1


				.386
				.model flat, stdcall

 00000000			.code 

 00000000			sortSelectAsm proc USES EAX EBX ECX EDX EDI ESI, tab_ptr:DWORD, len:DWORD

 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  53		   *	    push   ebx
 00000005  51		   *	    push   ecx
 00000006  52		   *	    push   edx
 00000007  57		   *	    push   edi
 00000008  56		   *	    push   esi
 00000009  8B 5D 08			MOV EBX, tab_ptr	;ustawianie indeksu bazowego
 0000000C  8B 4D 0C			MOV ECX, len			;ustawianie licznika
 0000000F			LOOP1:
 0000000F  83 F9 00			CMP	ECX, 0				;sprawdzanie licznika
 00000012  7E 29			JLE END_LOOP1
 00000014  33 F6			XOR ESI, ESI			;zerowanie maksymalnego indeksu
 00000016  BF 00000001			MOV EDI, 1				;ustawianie licznika 2
 0000001B			LOOP2:  
 0000001B  3B F9			CMP EDI, ECX			;sprawdzanie licznika 2
 0000001D  7D 0D			JGE END_LOOP2
 0000001F  8B 04 BB			MOV EAX, [EBX+EDI*4]	
 00000022  3B 04 B3			CMP EAX, [EBX+ESI*4]	;sprawdzanie czy bedzie nowy element maksymalny
 00000025  7E 02			JLE NEXTK
 00000027  8B F7			MOV ESI, EDI			;nowy indeks maxymalny
 00000029			NEXTK:
 00000029  47				INC EDI
 0000002A  EB EF			JMP LOOP2
 0000002C			END_LOOP2:
														;zamiana maksymalnego elementu
 0000002C  8B 54 8B FC			MOV EDX, [EBX+ECX*4-4]
 00000030  8B 04 B3			MOV EAX, [EBX+ESI*4]
 00000033  89 44 8B FC			MOV [EBX+ECX*4-4], EAX
 00000037  89 14 B3			MOV [EBX+ESI*4], EDX
 0000003A  49				DEC ECX
 0000003B  EB D2			JMP LOOP1
 0000003D			END_LOOP1:
					RET
 0000003D  5E		   *	    pop    esi
 0000003E  5F		   *	    pop    edi
 0000003F  5A		   *	    pop    edx
 00000040  59		   *	    pop    ecx
 00000041  5B		   *	    pop    ebx
 00000042  58		   *	    pop    eax
 00000043  C9		   *	    leave  
 00000044  C2 0008	   *	    ret    00008h
 00000047			sortSelectAsm  ENDP

 00000047			sortInsertAsm proc USES EAX EBX ECX EDX EDI ESI, tab_ptr:DWORD, len:DWORD
					
 00000047  55		   *	    push   ebp
 00000048  8B EC	   *	    mov    ebp, esp
 0000004A  50		   *	    push   eax
 0000004B  53		   *	    push   ebx
 0000004C  51		   *	    push   ecx
 0000004D  52		   *	    push   edx
 0000004E  57		   *	    push   edi
 0000004F  56		   *	    push   esi
 00000050  8B 5D 08			MOV EBX, tab_ptr			;ladowanie rejestrow bazowego
 00000053  8B 4D 0C			MOV ECX, len					;ladowanie licznika dla for
 00000056  BE 00000001			MOV ESI, 1						;ladowanie licznika
 0000005B			I_FOR_LOOP_TOP:
 0000005B  8B 14 B3			MOV EDX, [EBX+ESI*4]  ;ladowanie temp = A[i]
 0000005E  8B FE			MOV EDI, ESI					;ladowanie licznika dla while
					
 00000060  4F				DEC	EDI								;j=i-1
 00000061			WHILE_LOOP_TOP:
 00000061  3B 14 BB			CMP EDX, [EBX+EDI*4]	;porownywane A[i] z A[j]
 00000064  7D 0D			JGE	WHILE_LOOP_DONE

 00000066  8B 04 BB			MOV EAX, [EBX+EDI*4]
 00000069  89 44 BB 04			MOV [EBX+EDI*4+4], EAX	;A[j+1] = A[j]
 0000006D  4F				DEC EDI
 0000006E  83 FF 00			CMP EDI,0
 00000071  7D EE			JGE WHILE_LOOP_TOP
 00000073			WHILE_LOOP_DONE:
 00000073  89 54 BB 04			MOV [EBX+EDI*4+4], EDX	;A[j+i] = temp
 00000077  46				INC ESI
 00000078  49				DEC ECX
 00000079  83 F9 01			CMP ECX,1
 0000007C  75 DD			JNE I_FOR_LOOP_TOP

					ret
 0000007E  5E		   *	    pop    esi
 0000007F  5F		   *	    pop    edi
 00000080  5A		   *	    pop    edx
 00000081  59		   *	    pop    ecx
 00000082  5B		   *	    pop    ebx
 00000083  58		   *	    pop    eax
 00000084  C9		   *	    leave  
 00000085  C2 0008	   *	    ret    00008h
 00000088			sortInsertAsm endp

 00000088			sortBubbleAsm PROC USES EAX EBX ECX EDX EDI ESI, tab_ptr:DWORD, len:DWORD
				LOCAL i_loop:DWORD 
 00000088  55		   *	    push   ebp
 00000089  8B EC	   *	    mov    ebp, esp
 0000008B  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000008E  50		   *	    push   eax
 0000008F  53		   *	    push   ebx
 00000090  51		   *	    push   ecx
 00000091  52		   *	    push   edx
 00000092  57		   *	    push   edi
 00000093  56		   *	    push   esi
 00000094  8B 5D 08			MOV EBX, tab_ptr		;ustawiany rejestr bazowy
 00000097  C7 45 FC			MOV i_loop, 0				;zerowanie zmiennej indeksowego
	   00000000
 0000009E  FF 4D 0C			DEC len
 000000A1			LOOP1:
 000000A1  8B 45 FC			MOV EAX, i_loop
 000000A4  3B 45 0C			CMP EAX, len		
 000000A7  7D 2F			JGE LOOP1_END
					
 000000A9  33 C9			XOR ECX, ECX				;zerowanie licznika zmian
 000000AB  33 FF			XOR EDI, EDI				;zerowanie licznika tablicy
 000000AD  8B 55 0C			MOV EDX, len
 000000B0  2B 55 FC			SUB EDX, i_loop			;dlugosc - i
					
					;DEC len						;zmniejszanie licznika dlugosci
					;MOV ECX, len				;ladowanie licznika 2
 000000B3			LOOP2:
 000000B3  3B FA			CMP EDI, EDX
 000000B5  7D 17			JGE LOOP2_END
					
 000000B7  8B 44 BB 04			MOV EAX, [EBX+EDI*4+4]
 000000BB  3B 04 BB			CMP EAX, [EBX+EDI*4]		;sprawdzanie czy jest wiekszy
 000000BE  7D 0B			JGE NEXT2
 000000C0  8B 34 BB			MOV ESI, [EBX+EDI*4]		;zamiana elementow
 000000C3  89 04 BB			MOV [EBX+EDI*4], EAX
 000000C6  89 74 BB 04			MOV [EBX+EDI*4+4], ESI
 000000CA  41				INC ECX							;zwiekszenie licznika zmian
 000000CB			NEXT2:
 000000CB  47				INC EDI							;zwiekszenie rejestrow indeksowych
 000000CC  EB E5			JMP LOOP2
 000000CE			LOOP2_END:
 000000CE  83 F9 00			CMP ECX, 0					;sprawdzenie czy nastapila jakas zmiana
 000000D1  74 05			JE LOOP1_END
 000000D3  FF 45 FC			INC i_loop
 000000D6  EB C9			JMP LOOP1
 000000D8			LOOP1_END:
					RET
 000000D8  5E		   *	    pop    esi
 000000D9  5F		   *	    pop    edi
 000000DA  5A		   *	    pop    edx
 000000DB  59		   *	    pop    ecx
 000000DC  5B		   *	    pop    ebx
 000000DD  58		   *	    pop    eax
 000000DE  C9		   *	    leave  
 000000DF  C2 0008	   *	    ret    00008h
 000000E2			sortBubbleAsm ENDP

 000000E2			_sortQuickAsm PROC NEAR

				  ;[ESP]  = IP
				  ;[ESP+4]  = right
				  ;[ESP+8]  = left
				  ; EBX = tab
 000000E2  8B 74 24 08		  MOV ESI, [ESP+8] ;lewy indeks pobieramy ze stosu
 000000E6  8B 7C 24 04			MOV EDI, [ESP+4] ;prawy indeks pobieramy ze stosu
						
 000000EA  8B 04 B3			MOV EAX, [EBX+ESI*4] ;ustawianie elementu osiowego
 000000ED			DO_LOOP:
 000000ED  3B 04 B3			CMP EAX, [EBX+ESI*4]	;ustawianie indeksu lewego
 000000F0  7E 03			JLE WHILE_2
 000000F2  46				INC ESI
 000000F3  EB F8			JMP DO_LOOP
 000000F5			WHILE_2:
 000000F5  3B 04 BB			CMP EAX, [EBX+EDI*4]	;ustawianie indeksu prawego
 000000F8  7D 03			JGE IF_1
 000000FA  4F				DEC EDI
 000000FB  EB F8			JMP WHILE_2
 000000FD			IF_1:
 000000FD  3B F7			CMP ESI, EDI					;sprawdzenie indeksow
 000000FF  7F 0E			JG	IF_1_END
 00000101  8B 0C B3			MOV ECX, [EBX+ESI*4]	;zamiana elementow
 00000104  8B 14 BB			MOV EDX, [EBX+EDI*4]
 00000107  89 14 B3			MOV [EBX+ESI*4], EDX
 0000010A  89 0C BB			MOV [EBX+EDI*4], ECX
 0000010D  46				INC ESI
 0000010E  4F				DEC EDI
 0000010F			IF_1_END:
 0000010F  3B F7			CMP ESI, EDI					;sprawdzenie indeksow
 00000111  7D 02			JGE IF_2
 00000113  EB D8			JMP DO_LOOP
 00000115			IF_2:
 00000115  8B 44 24 08			MOV EAX, [ESP+8]			;pobieramy lewy parametr
 00000119  56				PUSH ESI							;indeks lewy = parametr potrzebny na drugi qsort
						
 0000011A  3B F8			CMP EDI, EAX
 0000011C  7E 09			JLE IF_3
 0000011E  50				PUSH EAX							;쓰duje lewy parametr (parametr lewy)
 0000011F  57				PUSH EDI							;쓰duje prawy parametr (indeks prawy)
 00000120  E8 FFFFFFBD			CALL _sortQuickAsm		;rekursja
 00000125  58				POP EAX
 00000126  58				POP EAX
 00000127			IF_3:
 00000127  8B 34 24			MOV ESI, [ESP]				;pobieranie ze stosu lewego indeksu
 0000012A  8B 44 24 08			MOV EAX, [ESP+8]			;pobieranie ze stosu prawy parametr
 0000012E  3B F0			CMP ESI, EAX
 00000130  7D 09			JGE DONE
 00000132  56				PUSH ESI							;쓰duje lewy parametr (indeks lewy)
 00000133  50				PUSH EAX							;쓰duje prawy parametr (parametr prawy)
 00000134  E8 FFFFFFA9			CALL _sortQuickAsm
 00000139  58				POP EAX
 0000013A  58				POP EAX
 0000013B			DONE:
 0000013B  58				POP EAX
 0000013C  C3				RET
 0000013D			_sortQuickAsm ENDP

 0000013D			sortQuickAsm PROC USES EAX EBX ECX EDX EDI ESI, tab_ptr:DWORD, len:DWORD
 0000013D  55		   *	    push   ebp
 0000013E  8B EC	   *	    mov    ebp, esp
 00000140  50		   *	    push   eax
 00000141  53		   *	    push   ebx
 00000142  51		   *	    push   ecx
 00000143  52		   *	    push   edx
 00000144  57		   *	    push   edi
 00000145  56		   *	    push   esi
 00000146  8B 5D 08			MOV EBX, tab_ptr			;ustawianie tablicy
 00000149  B8 00000000			MOV EAX, 0						;ladowanie poczatkowego lewego parametru
 0000014E  50				PUSH EAX
 0000014F  FF 75 0C			PUSH len							;ladowanie prawego parametru
 00000152  E8 FFFFFF8B			CALL _sortQuickAsm
 00000157  58				POP EAX
 00000158  58				POP EAX
					ret
 00000159  5E		   *	    pop    esi
 0000015A  5F		   *	    pop    edi
 0000015B  5A		   *	    pop    edx
 0000015C  59		   *	    pop    ecx
 0000015D  5B		   *	    pop    ebx
 0000015E  58		   *	    pop    eax
 0000015F  C9		   *	    leave  
 00000160  C2 0008	   *	    ret    00008h
 00000163			sortQuickAsm ENDP

				end
Microsoft (R) Macro Assembler Version 9.00.30729.01	    02/17/11 20:18:13
.\Sortowanie.asm					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000163 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_sortQuickAsm  . . . . . . . . .	P Near	 000000E2 _TEXT	Length= 0000005B Public STDCALL
  DO_LOOP  . . . . . . . . . . .	L Near	 000000ED _TEXT	
  WHILE_2  . . . . . . . . . . .	L Near	 000000F5 _TEXT	
  IF_1 . . . . . . . . . . . . .	L Near	 000000FD _TEXT	
  IF_1_END . . . . . . . . . . .	L Near	 0000010F _TEXT	
  IF_2 . . . . . . . . . . . . .	L Near	 00000115 _TEXT	
  IF_3 . . . . . . . . . . . . .	L Near	 00000127 _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 0000013B _TEXT	
sortBubbleAsm  . . . . . . . . .	P Near	 00000088 _TEXT	Length= 0000005A Public STDCALL
  tab_ptr  . . . . . . . . . . .	DWord	 bp + 00000008
  len  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  i_loop . . . . . . . . . . . .	DWord	 bp - 00000004
  LOOP1  . . . . . . . . . . . .	L Near	 000000A1 _TEXT	
  LOOP2  . . . . . . . . . . . .	L Near	 000000B3 _TEXT	
  NEXT2  . . . . . . . . . . . .	L Near	 000000CB _TEXT	
  LOOP2_END  . . . . . . . . . .	L Near	 000000CE _TEXT	
  LOOP1_END  . . . . . . . . . .	L Near	 000000D8 _TEXT	
sortInsertAsm  . . . . . . . . .	P Near	 00000047 _TEXT	Length= 00000041 Public STDCALL
  tab_ptr  . . . . . . . . . . .	DWord	 bp + 00000008
  len  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  I_FOR_LOOP_TOP . . . . . . . .	L Near	 0000005B _TEXT	
  WHILE_LOOP_TOP . . . . . . . .	L Near	 00000061 _TEXT	
  WHILE_LOOP_DONE  . . . . . . .	L Near	 00000073 _TEXT	
sortQuickAsm . . . . . . . . . .	P Near	 0000013D _TEXT	Length= 00000026 Public STDCALL
  tab_ptr  . . . . . . . . . . .	DWord	 bp + 00000008
  len  . . . . . . . . . . . . .	DWord	 bp + 0000000C
sortSelectAsm  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000047 Public STDCALL
  tab_ptr  . . . . . . . . . . .	DWord	 bp + 00000008
  len  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  LOOP1  . . . . . . . . . . . .	L Near	 0000000F _TEXT	
  LOOP2  . . . . . . . . . . . .	L Near	 0000001B _TEXT	
  NEXTK  . . . . . . . . . . . .	L Near	 00000029 _TEXT	
  END_LOOP2  . . . . . . . . . .	L Near	 0000002C _TEXT	
  END_LOOP1  . . . . . . . . . .	L Near	 0000003D _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
